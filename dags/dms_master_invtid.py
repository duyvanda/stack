# -*- coding: utf-8 -*-
"""d_dms_master_invtid.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1I4VQKz4e22r-3jBptKzb0gMlC90G0tJG
"""

from utils.df_handle import *

import pendulum
from airflow import DAG
from airflow.operators.dummy_operator import DummyOperator
from airflow.operators.python_operator import PythonOperator

local_tz = pendulum.timezone("Asia/Bangkok")

name='MASTER_INVTID'
prefix='DMS_'
csv_path = '/usr/local/airflow/plugins'+'/'

dag_params = {
    'owner': 'airflow',
    "depends_on_past": False,
    'start_date': datetime(2022, 5, 16, tzinfo=local_tz),
    'email_on_failure': True,
    'email_on_retry': False,
    'email':['duyvq@merapgroup.com', 'vanquangduy10@gmail.com'],
    'do_xcom_push': False,
    'execution_timeout':timedelta(seconds=300)
    # 'retries': 3,
    # 'retry_delay': timedelta(minutes=10),
}

dag = DAG(prefix+name,
          catchup=False,
          default_args=dag_params,
          schedule_interval= '0 2 * * *',
          tags=[prefix+name, 'Sync']
)

sql = \
"""
select
InvtID,
ClassID,
Descr,
Descr1,
Status,
StkUnit,
Crtd_DateTime,
Crtd_User,
LUpd_DateTime,
LUpd_User
from IN_Inventory
"""

table_name = "d_dms_master_invtid"
table_temp = "d_dms_master_invtid_temp"

# print(sql)
# df = get_ms_df(sql)
# df['inserted_at'] = datetime.now()
# df['inserted_At']
# bq_values_insert(df, f"{table_temp}", 3)
# sql = \
# f"""
# DROP TABLE IF EXISTS biteam.{table_name};
# CREATE TABLE biteam.{table_name} LIKE biteam.{table_temp}
# PARTITION BY DATE(crtd_datetime)
# CLUSTER BY invtid
# """
# print(sql)
# execute_bq_query(sql)

# dsql = \
# f"""
# delete from biteam.{table_name} where date(crtd_datetime) >= '{datenow}'
# """
# print("delete_sql: ", dsql)
# execute_bq_query(dsql)

# bq_values_insert(df, f"{table_name}", 2)
# sql = \
# f"""
# DROP TABLE IF EXISTS biteam.{table_temp};
# """
# execute_bq_query(sql)

# bq_values_insert(df, f"{table_name}", 2)

def update():
    df = get_ms_df(sql)
    df['inserted_at'] = datetime.now()
    try:
        print("data shape", df.shape)
        assert df.shape[0] >0
    except AssertionError:
        print("No customer changed")
    else:
        bqsql = \
        f"""truncate table biteam.{table_name}"""
        execute_bq_query(bqsql)
        bq_values_insert(df, f"{table_name}", 2)

dummy_start = DummyOperator(task_id="dummy_start", dag=dag)

update = PythonOperator(task_id="update", python_callable=update, dag=dag)

dummy_start >> update